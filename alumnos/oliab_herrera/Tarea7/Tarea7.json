{"paragraphs":[{"text":"%pyspark\nfrom pyspark.ml.regression import RandomForestRegressor\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\nfrom pyspark.ml.evaluation import RegressionEvaluator \nfrom pyspark.ml.regression import GeneralizedLinearRegression\nfrom pyspark.ml.feature import OneHotEncoder, StringIndexer\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.feature import VectorAssembler\nimport time\n\nflights = spark.read.csv(\"s3a://jorge-altamirano/flights/flights.csv\", header = True, inferSchema = True)\n\n\nvariables = [\"AIRLINE\",\"ORIGIN_AIRPORT\",\"DESTINATION_AIRPORT\",\"DAY_OF_WEEK\"]\nvariables_string_encoded=[\"AIRLINE_string_encoded\",\"ORIGIN_AIRPORT_string_encoded\",\"DESTINATION_AIRPORT_string_encoded\",\"DAY_OF_WEEK_string_encoded\"]\n\nstage_string = [StringIndexer(inputCol= c, outputCol= c+\"_string_encoded\") for c in variables]\nstage_one_hot = [OneHotEncoder(inputCol= c+\"_string_encoded\", outputCol= c+ \"_one_hot\") for c in variables]\n\nppl = Pipeline(stages= stage_string + stage_one_hot)\nflights = ppl.fit(flights).transform(flights)\n\n\nflights1 = flights.dropna(how='any', thresh=None, subset=[\"YEAR\",\"MONTH\",\"DAY\",\"FLIGHT_NUMBER\",\"SCHEDULED_DEPARTURE\",\"DEPARTURE_TIME\",\"TAXI_OUT\", \"WHEELS_OFF\", \"SCHEDULED_TIME\",\"ELAPSED_TIME\",\"AIR_TIME\",\"DISTANCE\",\"WHEELS_OFF\",\"SCHEDULED_TIME\", \"ARRIVAL_TIME\",\"ARRIVAL_DELAY\"])\n\nvariables_int=[\"YEAR\",\"MONTH\",\"DAY\",\"FLIGHT_NUMBER\",\"SCHEDULED_DEPARTURE\",\"DEPARTURE_TIME\",\"TAXI_OUT\",\n              \"WHEELS_OFF\", \"SCHEDULED_TIME\",\"ELAPSED_TIME\",\"AIR_TIME\",\"DISTANCE\",\"WHEELS_OFF\",\"SCHEDULED_TIME\",\n              \"ARRIVAL_TIME\",\"ARRIVAL_DELAY\"]\n\nvariables_trans=[\"AIRLINE_one_hot\",\"ORIGIN_AIRPORT_one_hot\",\"DESTINATION_AIRPORT_one_hot\",\"DAY_OF_WEEK_one_hot\"]\n\nfeatures = variables_int + variables_trans\n\nvector_assembler = VectorAssembler(inputCols = features, outputCol= \"features\")\ndata_training_and_test1 = vector_assembler.transform(flights1)\n\n\nclassifiers = {\n         'LR': RandomForestRegressor(labelCol = \"DEPARTURE_DELAY\", featuresCol = \"features\"),\n         'GLR': GeneralizedLinearRegression(labelCol = \"DEPARTURE_DELAY\", featuresCol = \"features\")}\n\ngrid = {\n    \"RF\":ParamGridBuilder() \\\n    .addGrid(RandomForestRegressor.maxDepth, [ 5,15,20]) \\\n    .addGrid(RandomForestRegressor.numTrees,[100,1000,10000]) \\\n    .build(),\n    \n    \"GLR\":ParamGridBuilder() \\\n    .addGrid(GeneralizedLinearRegression.regParam, [.05, .1,.15]) \\\n    .addGrid(GeneralizedLinearRegression.maxIter,[10,20,50]) \\\n    .build()\n     }\n     \n(training_data, test_data) = data_training_and_test1.randomSplit([0.7, 0.3])\n     \nlista=[\"RF\",\"GLR\"]\nclassifiers[lista[0]]\n\n(training_data1, test_data1) = training_data.randomSplit([0.7, 0.3])\nstart = time.time()\n\nfor i in range(1,3):\n    modelo = classifiers[lista[i-1]]\n    modelo_cv = modelo\n    paramGrid=grid[lista[i-1]]\n    \n    crossval = CrossValidator(estimator = modelo_cv,\n                        estimatorParamMaps=paramGrid,\n                        evaluator = RegressionEvaluator(\n    labelCol=\"DEPARTURE_DELAY\", predictionCol=\"prediction\", metricName=\"rmse\"),\n                        numFolds= 10)\n\n    cv_model = crossval.fit(training_data)\n    \n    \n    predictions = cv_model.transform(test_data1)\n    evaluator= RegressionEvaluator(labelCol = \"DEPARTURE_DELAY\", predictionCol=\"prediction\", metricName= \"rmse\")\n    rmse = evaluator.evaluate(predictions)\n    print(\"Revisando el modelo:\")\n    print(lista[i-1])\n    print(\"El modelo predice\")\n    print(predictions.select(\"DEPARTURE_DELAY\",\"prediction\").show(5))\n    print(\"La raíz del error cuarático medio del modelo es:\")\n    print(rmse)\n    print(\"Los hiperparámetros del modelo son:\")\n    print(cv_model.bestModel.extractParamMap())\n    i=i+1\n    \nend = time.time()\nprint \"Took %f ms\" % ((end - start) * 1000.0)","user":"anonymous","dateUpdated":"2018-04-22T00:17:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524337541091_-1581539764","id":"20180421-190541_1186054608","dateCreated":"2018-04-21T19:05:41+0000","dateStarted":"2018-04-21T19:05:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:194","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Revisando el modelo:\nRF\nEl modelo predice\n+---------------+-------------------+\n|DEPARTURE_DELAY|         prediction|\n+---------------+-------------------+\n|             -5|  0.778046687623358|\n|             -4| 0.5645111226191533|\n|            -11|-0.1845814066808115|\n|             -3|  2.805803603718009|\n|             91| 112.05042088704006|\n+---------------+-------------------+\nonly showing top 5 rows\n\nNone\nLa raíz del error cuarático medio del modelo es:\n18.0969365977\nLos hiperparámetros del modelo son:\n{Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='subsamplingRate', doc='Fraction of the training data used for learning each decision tree, in range (0, 1].'): 1.0, Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='maxMemoryInMB', doc='Maximum memory in MB allocated to histogram aggregation.'): 256, Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='numTrees', doc='Number of trees to train (>= 1)'): 20, Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='labelCol', doc='label column name'): 'DEPARTURE_DELAY', Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='predictionCol', doc='prediction column name'): 'prediction', Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='minInfoGain', doc='Minimum information gain for a split to be considered at a tree node.'): 0.0, Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='maxDepth', doc='Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes.'): 5, Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='maxBins', doc='Max number of bins for discretizing continuous features.  Must be >=2 and >= number of categories for any categorical feature.'): 32, Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='impurity', doc='Criterion used for information gain calculation (case-insensitive). Supported options: variance'): 'variance', Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='minInstancesPerNode', doc='Minimum number of instances each child must have after split.  If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1.'): 1, Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='cacheNodeIds', doc='If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees.'): False, Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='featureSubsetStrategy', doc='The number of features to consider for splits at each tree node. Supported options: auto, all, onethird, sqrt, log2, (0.0-1.0], [1-n].'): 'auto', Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='checkpointInterval', doc='set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext'): 10, Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='featuresCol', doc='features column name'): 'features', Param(parent=u'RandomForestRegressor_4cb5b7e671e510884147', name='seed', doc='random seed'): -5851613654371098793}\nRevisando el modelo:\nGLR\nEl modelo predice\n+---------------+-------------------+\n|DEPARTURE_DELAY|         prediction|\n+---------------+-------------------+\n|             -5| -4.975291202288553|\n|             -4| -3.996925739051211|\n|            -11|-10.980505857637572|\n|             -3|-3.0012243877784055|\n|             91|  90.98677032923528|\n+---------------+-------------------+\nonly showing top 5 rows\n\nNone\nLa raíz del error cuarático medio del modelo es:\n0.00883033133277\nLos hiperparámetros del modelo son:\n{Param(parent=u'GeneralizedLinearRegression_4940a5eeb13213a574c8', name='featuresCol', doc='features column name'): 'features', Param(parent=u'GeneralizedLinearRegression_4940a5eeb13213a574c8', name='maxIter', doc='maximum number of iterations (>= 0)'): 25, Param(parent=u'GeneralizedLinearRegression_4940a5eeb13213a574c8', name='labelCol', doc='label column name'): 'DEPARTURE_DELAY', Param(parent=u'GeneralizedLinearRegression_4940a5eeb13213a574c8', name='fitIntercept', doc='whether to fit an intercept term'): True, Param(parent=u'GeneralizedLinearRegression_4940a5eeb13213a574c8', name='predictionCol', doc='prediction column name'): 'prediction', Param(parent=u'GeneralizedLinearRegression_4940a5eeb13213a574c8', name='variancePower', doc='The power in the variance function of the Tweedie distribution which characterizes the relationship between the variance and mean of the distribution. Only applicable to the Tweedie family. Supported values: 0 and [1, Inf).'): 0.0, Param(parent=u'GeneralizedLinearRegression_4940a5eeb13213a574c8', name='family', doc='The name of family which is a description of the error distribution to be used in the model. Supported options: binomial, gamma, poisson, gaussian, tweedie.'): 'gaussian', Param(parent=u'GeneralizedLinearRegression_4940a5eeb13213a574c8', name='tol', doc='the convergence tolerance for iterative algorithms (>= 0)'): 1e-06, Param(parent=u'GeneralizedLinearRegression_4940a5eeb13213a574c8', name='solver', doc='The solver algorithm for optimization. Supported options: irls. (Default irls)'): 'irls', Param(parent=u'GeneralizedLinearRegression_4940a5eeb13213a574c8', name='regParam', doc='regularization parameter (>= 0)'): 0.0}\nTook 18059639.619827 ms\n"}]},"dateFinished":"2018-04-22T00:08:59+0000"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2018-04-21T19:05:59+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524337559930_-292768866","id":"20180421-190559_1547424848","dateCreated":"2018-04-21T19:05:59+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:195"}],"name":"Tarea7","id":"2DE43ZKFT","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}