{"paragraphs":[{"text":"%pyspark\n#-- Cargo librerias:\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import col\n\nfrom timeit import default_timer as timer\n\nfrom pyspark.ml.feature import StringIndexer, IndexToString, VectorAssembler\nfrom pyspark.ml.regression import RandomForestRegressor, DecisionTreeRegressor, GBTRegressor, LinearRegression\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\nfrom pyspark.ml import Pipeline, Model","dateUpdated":"2018-05-03T01:02:00+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215429_-1312995805","id":"20180425-165918_76041838","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:269","user":"anonymous","dateFinished":"2018-05-03T01:02:32+0000","dateStarted":"2018-05-03T01:02:00+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n#-- Defino SparkSession\nspark = SparkSession.builder.getOrCreate()","dateUpdated":"2018-05-03T01:02:00+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215434_-1313380554","id":"20180425-170529_597580618","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:270","user":"anonymous","dateFinished":"2018-05-03T01:02:32+0000","dateStarted":"2018-05-03T01:02:03+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n#-- Ruta del archivo en S3:\npath_flights = 's3a://basharino/flights/flights/flights.csv'\n\n#-- Cargo datos (con header):\ndf_data_orig = spark.read \\\n    .format('org.apache.spark.sql.execution.datasources.csv.CSVFileFormat') \\\n    .option('header', 'true') \\\n    .option('inferSchema', 'true') \\\n    .load(path_flights)","dateUpdated":"2018-05-03T01:02:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215434_-1313380554","id":"20180425-170010_667663468","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:271","user":"anonymous","dateFinished":"2018-05-03T01:02:59+0000","dateStarted":"2018-05-03T01:02:32+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n#-- Selecciono columnas de interes:\n#-- DEPARTURE_DELAY es la variable a predecir. Se renombra como label\ndf_data = df_data_orig.filter(\"CANCELLED = 0\") \\\n    .select(\"MONTH\", \n            \"DAY\",\n            \"DAY_OF_WEEK\", \n            \"AIRLINE\",\n            \"ORIGIN_AIRPORT\", \n            \"DESTINATION_AIRPORT\", \n            \"SCHEDULED_DEPARTURE\", \n            \"TAXI_OUT\", \n            \"SCHEDULED_TIME\", \n            \"ELAPSED_TIME\", \n            \"AIR_TIME\", \n            \"DISTANCE\", \n            \"TAXI_IN\",\n            \"ARRIVAL_DELAY\", \n            col(\"DEPARTURE_DELAY\").alias(\"label\")) \n# WEATHER_DELAY    \n","dateUpdated":"2018-05-03T01:02:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215434_-1313380554","id":"20180425-170326_744533496","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:272","user":"anonymous","dateFinished":"2018-05-03T01:02:59+0000","dateStarted":"2018-05-03T01:02:33+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n#-- cantidad de registros:\ndf_data.count()","dateUpdated":"2018-05-03T01:02:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215434_-1313380554","id":"20180426-002522_551357411","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:273","user":"anonymous","dateFinished":"2018-05-03T01:03:06+0000","dateStarted":"2018-05-03T01:03:00+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"5729195\n"}]}},{"text":"%pyspark\n#-- Visualizo 1ros. registros:\ndf_data.show(10)\n","dateUpdated":"2018-05-03T01:02:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215435_-1313765303","id":"20180425-170426_1080857702","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:274","user":"anonymous","dateFinished":"2018-05-03T01:03:07+0000","dateStarted":"2018-05-03T01:03:00+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+---+-----------+-------+--------------+-------------------+-------------------+--------+--------------+------------+--------+--------+-------+-------------+-----+\n|MONTH|DAY|DAY_OF_WEEK|AIRLINE|ORIGIN_AIRPORT|DESTINATION_AIRPORT|SCHEDULED_DEPARTURE|TAXI_OUT|SCHEDULED_TIME|ELAPSED_TIME|AIR_TIME|DISTANCE|TAXI_IN|ARRIVAL_DELAY|label|\n+-----+---+-----------+-------+--------------+-------------------+-------------------+--------+--------------+------------+--------+--------+-------+-------------+-----+\n|    1|  1|          4|     AS|           ANC|                SEA|                  5|      21|           205|         194|     169|    1448|      4|          -22|  -11|\n|    1|  1|          4|     AA|           LAX|                PBI|                 10|      12|           280|         279|     263|    2330|      4|           -9|   -8|\n|    1|  1|          4|     US|           SFO|                CLT|                 20|      16|           286|         293|     266|    2296|     11|            5|   -2|\n|    1|  1|          4|     AA|           LAX|                MIA|                 20|      15|           285|         281|     258|    2342|      8|           -9|   -5|\n|    1|  1|          4|     AS|           SEA|                ANC|                 25|      11|           235|         215|     199|    1448|      5|          -21|   -1|\n|    1|  1|          4|     DL|           SFO|                MSP|                 25|      18|           217|         230|     206|    1589|      6|            8|   -5|\n|    1|  1|          4|     NK|           LAS|                MSP|                 25|      11|           181|         170|     154|    1299|      5|          -17|   -6|\n|    1|  1|          4|     US|           LAX|                CLT|                 30|      13|           273|         249|     228|    2125|      8|          -10|   14|\n|    1|  1|          4|     AA|           SFO|                DFW|                 30|      17|           195|         193|     173|    1464|      3|          -13|  -11|\n|    1|  1|          4|     DL|           LAS|                ATL|                 30|      12|           221|         203|     186|    1747|      5|          -15|    3|\n+-----+---+-----------+-------+--------------+-------------------+-------------------+--------+--------------+------------+--------+--------+-------+-------------+-----+\nonly showing top 10 rows\n\n"}]}},{"text":"%pyspark\n#-- Elimino registros con nulos:\ndf_data = df_data.na.drop(subset=[\"MONTH\", \n                                  \"DAY\",\n                                  \"DAY_OF_WEEK\",\n                                  \"AIRLINE\",\n                                  \"ORIGIN_AIRPORT\",\n                                  \"DESTINATION_AIRPORT\",\n                                  \"SCHEDULED_DEPARTURE\",\n                                  \"TAXI_OUT\",\n                                  \"SCHEDULED_TIME\",\n                                  \"ELAPSED_TIME\",\n                                  \"AIR_TIME\",\n                                  \"DISTANCE\",\n                                  \"TAXI_IN\",\n                                  \"ARRIVAL_DELAY\",\n                                  \"label\"])","dateUpdated":"2018-05-03T01:02:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215435_-1313765303","id":"20180425-170902_246490386","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:275","user":"anonymous","dateFinished":"2018-05-03T01:03:07+0000","dateStarted":"2018-05-03T01:03:06+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n#-- Visualizo esquema:\ndf_data.printSchema()","dateUpdated":"2018-05-03T01:02:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215435_-1313765303","id":"20180425-171022_1085288117","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:276","user":"anonymous","dateFinished":"2018-05-03T01:03:07+0000","dateStarted":"2018-05-03T01:03:07+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- MONTH: integer (nullable = true)\n |-- DAY: integer (nullable = true)\n |-- DAY_OF_WEEK: integer (nullable = true)\n |-- AIRLINE: string (nullable = true)\n |-- ORIGIN_AIRPORT: string (nullable = true)\n |-- DESTINATION_AIRPORT: string (nullable = true)\n |-- SCHEDULED_DEPARTURE: integer (nullable = true)\n |-- TAXI_OUT: integer (nullable = true)\n |-- SCHEDULED_TIME: integer (nullable = true)\n |-- ELAPSED_TIME: integer (nullable = true)\n |-- AIR_TIME: integer (nullable = true)\n |-- DISTANCE: integer (nullable = true)\n |-- TAXI_IN: integer (nullable = true)\n |-- ARRIVAL_DELAY: integer (nullable = true)\n |-- label: integer (nullable = true)\n\n"}]}},{"text":"%pyspark\n#-- Separo datos en Entrenamiento y Prueba (70%, 30%)\ntrain_data, test_data = df_data.randomSplit([0.7, 0.3])\n\nprint(\"Cant. de registros de Entrenamiento: \" + str(train_data.count()))\nprint(\"Cant. de registros de Prueba       : \" + str(test_data.count()))","dateUpdated":"2018-05-03T01:02:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215435_-1313765303","id":"20180425-171036_1197072076","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:277","user":"anonymous","dateFinished":"2018-05-03T01:03:27+0000","dateStarted":"2018-05-03T01:03:07+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Cant. de registros de Entrenamiento: 3999771\nCant. de registros de Prueba       : 1714237\n"}]}},{"text":"%pyspark\n#-- Convierto los campos que son de tipo String a numericos utilizando StringIndexer:\nstringIndexer_airl = StringIndexer(inputCol=\"AIRLINE\", outputCol=\"AIRLINE_IX\").setHandleInvalid(\"skip\")\nstringIndexer_orig = StringIndexer(inputCol=\"ORIGIN_AIRPORT\", outputCol=\"ORIGIN_AIRPORT_IX\").setHandleInvalid(\"skip\")\nstringIndexer_dest = StringIndexer(inputCol=\"DESTINATION_AIRPORT\", outputCol=\"DESTINATION_AIRPORT_IX\").setHandleInvalid(\"skip\")","dateUpdated":"2018-05-03T01:02:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215436_-1315689047","id":"20180425-171123_1017395655","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:278","user":"anonymous","dateFinished":"2018-05-03T01:03:28+0000","dateStarted":"2018-05-03T01:03:08+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n#-- Creo Feature Vector:\nvectorAssembler_features = VectorAssembler(inputCols=[\"MONTH\",\n                                                      \"DAY\",\n                                                      \"DAY_OF_WEEK\",\n                                                      \"AIRLINE_IX\",\n                                                      \"ORIGIN_AIRPORT_IX\",\n                                                      \"DESTINATION_AIRPORT_IX\",\n                                                      \"SCHEDULED_DEPARTURE\",\n                                                      \"TAXI_OUT\",\n                                                      \"SCHEDULED_TIME\",\n                                                      \"ELAPSED_TIME\",\n                                                      \"AIR_TIME\",\n                                                      \"DISTANCE\",\n                                                      \"TAXI_IN\",\n                                                      \"ARRIVAL_DELAY\"], \n                                            outputCol='features')","dateUpdated":"2018-05-03T01:02:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215436_-1315689047","id":"20180425-171349_687422936","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:279","user":"anonymous","dateFinished":"2018-05-03T01:03:28+0000","dateStarted":"2018-05-03T01:03:28+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n#-- Crea diccionarios con los parametros de los modelos a probar:\n\n#-- Regressors --:\nrgrs = {\n    'RandomForest': RandomForestRegressor(featuresCol='features', labelCol='label', maxBins=650),\n    'DecisionTree': DecisionTreeRegressor(featuresCol='features', labelCol='label', maxBins=650), \n    'GradientBoosted': GBTRegressor(featuresCol='features', labelCol='label', maxBins=650),\n    'LinearRegression': LinearRegression(featuresCol='features', labelCol='label'),\n}\n\n#-- Parámetros --:\ngrid = {\n    'RandomForest': ParamGridBuilder() \\\n        .addGrid(rgrs['RandomForest'].numTrees, [3, 5, 10]) \\\n        .addGrid(rgrs['RandomForest'].maxDepth, [2, 3, 5]) \\\n        .build(),\n    \n    'DecisionTree': ParamGridBuilder() \\\n        .addGrid(rgrs['DecisionTree'].minInfoGain, [0.0, 0.3, 0.5]) \\\n        .addGrid(rgrs['DecisionTree'].maxDepth, [2, 3, 5]) \\\n        .build(),\n\n    'LinearRegression': ParamGridBuilder() \\\n        .addGrid(rgrs['LinearRegression'].regParam, [0.2, 0.5, 0.8]) \\\n        .addGrid(rgrs['LinearRegression'].maxIter, [2, 3, 5]) \\\n        .build(),\n\n    'GradientBoosted': ParamGridBuilder() \\\n        .addGrid(rgrs['GradientBoosted'].maxDepth, [3, 5, 8]) \\\n        .addGrid(rgrs['GradientBoosted'].maxIter, [2, 3, 5]) \\\n        .build(), \n}       \n\n#-- Modelos a correr --:\nmodels_to_run=['DecisionTree','RandomForest'] ","dateUpdated":"2018-05-03T01:02:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215436_-1315689047","id":"20180425-171452_1045407325","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:280","user":"anonymous","dateFinished":"2018-05-03T01:03:28+0000","dateStarted":"2018-05-03T01:03:28+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n#-- Funcion: MAGIC LOOP:\ndef magic_loop(models_to_run, regrs, grid, train, stIndexer_airl, stIndexer_orig, stIndexer_dest, vectorAssembler):\n    # Parametros:\n    ## models_to_run: Lista de modelos a ejecutar\n    ## regrs: Modelos\n    ## grid: ParamGrid con los parametros de los modelos\n    ## train: datos de entrenamiento\n    ## stIndexer_airl, stIndexer_orig, stIndexer_dest: indexer de columnas String\n    ## --- Se deberia cambiar a una lista para que sea mas dinamico.\n    ## vectorAssembler: features\n    \n    best_score = 0\n    best_model = ''\n    \n    print(\"Modelo\\tDesempeño\")\n    \n    #-- Reccorro lista de modelos a correr: \n    for index, rgr in enumerate([rgrs[x] for x in models_to_run]):\n\n        #-- Defino Pipeline:     \n        pipeline_ml = Pipeline(stages=[stIndexer_airl,                                      \n                                       stIndexer_orig,\n                                       stIndexer_dest,\n                                       vectorAssembler,\n                                       rgr])\n                                       \n        #-- Cross Validation:\n        crossval = CrossValidator(estimator=pipeline_ml,\n                                  estimatorParamMaps=grid[models_to_run[index]],\n                                  evaluator=RegressionEvaluator(),  # metricName por defecto: \"rmse\"\n                                  numFolds=10)       \n\n        #-- Cross validation tambien es un estimador, le hacemos fit\n        cvModel = crossval.fit(train)\n\n        #-- Imprimo info. para analizar ejecuciones:\n        print(\"{}\\t{}\".format(models_to_run[index], cvModel.avgMetrics[0]))\n    \n        #-- El Cross-Validation con el ParamGrid retorna el mejor modelo \n        ## luego de ejecutar toda las combinaciones de hiperparametros\n        #-- Valido el error obtenido para retornar el mejor entre los modelos probados:\n        if (best_score == 0) or (cvModel.avgMetrics[0] < best_score):\n            best_score = cvModel.avgMetrics[0]\n            best_model = cvModel\n            \n    return best_model","dateUpdated":"2018-05-03T01:28:37+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215436_-1315689047","id":"20180425-171532_170045894","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:281","user":"anonymous","dateFinished":"2018-05-03T01:03:28+0000","dateStarted":"2018-05-03T01:03:28+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\nstart = timer()\nmodelo_mloop = magic_loop(models_to_run, rgrs, grid, train_data, stringIndexer_airl, stringIndexer_orig,  stringIndexer_dest, vectorAssembler_features)\nend = timer()  ","dateUpdated":"2018-05-03T01:02:04+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215437_-1316073796","id":"20180425-171602_1022590385","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:282","user":"anonymous","dateFinished":"2018-05-03T02:16:38+0000","dateStarted":"2018-05-03T01:03:28+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Modelo\tDesempeño\nDecisionTree\t17.3417213102\nRandomForest\t32.6650559397\n"}]}},{"text":"%pyspark\nprint(\"Tiempo de ejecucion:\", round((end - start)/60), \"minutos\")","dateUpdated":"2018-05-03T01:02:04+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215437_-1316073796","id":"20180425-213044_1843685424","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:283","user":"anonymous","dateFinished":"2018-05-03T02:16:38+0000","dateStarted":"2018-05-03T01:03:28+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"('Tiempo de ejecucion:', 73.0, 'minutos')\n"}]}},{"text":"%pyspark\nmodelo_mloop.avgMetrics[0]","dateUpdated":"2018-05-03T01:02:04+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215437_-1316073796","id":"20180425-180053_193889595","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284","user":"anonymous","dateFinished":"2018-05-03T02:16:38+0000","dateStarted":"2018-05-03T02:16:38+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"17.34172131023618\n"}]}},{"text":"%pyspark\nmodelo_mloop.bestModel.stages[-1]","dateUpdated":"2018-05-03T01:02:04+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215437_-1316073796","id":"20180425-211217_968832500","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:285","user":"anonymous","dateFinished":"2018-05-03T02:16:38+0000","dateStarted":"2018-05-03T02:16:38+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DecisionTreeRegressionModel (uid=DecisionTreeRegressor_478380e9b420916b3f00) of depth 5 with 63 nodes\n"}]}},{"text":"%pyspark\nmodelo_mloop.bestModel.stages[-1].extractParamMap()","dateUpdated":"2018-05-03T01:02:04+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215438_-1314919549","id":"20180425-211235_736448440","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:286","user":"anonymous","dateFinished":"2018-05-03T02:16:38+0000","dateStarted":"2018-05-03T02:16:38+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"{Param(parent=u'DecisionTreeRegressor_478380e9b420916b3f00', name='cacheNodeIds', doc='If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees.'): False, Param(parent=u'DecisionTreeRegressor_478380e9b420916b3f00', name='labelCol', doc='label column name'): 'label', Param(parent=u'DecisionTreeRegressor_478380e9b420916b3f00', name='featuresCol', doc='features column name'): 'features', Param(parent=u'DecisionTreeRegressor_478380e9b420916b3f00', name='checkpointInterval', doc='set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext'): 10, Param(parent=u'DecisionTreeRegressor_478380e9b420916b3f00', name='impurity', doc='Criterion used for information gain calculation (case-insensitive). Supported options: variance'): 'variance', Param(parent=u'DecisionTreeRegressor_478380e9b420916b3f00', name='predictionCol', doc='prediction column name'): 'prediction', Param(parent=u'DecisionTreeRegressor_478380e9b420916b3f00', name='minInstancesPerNode', doc='Minimum number of instances each child must have after split.  If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1.'): 1, Param(parent=u'DecisionTreeRegressor_478380e9b420916b3f00', name='minInfoGain', doc='Minimum information gain for a split to be considered at a tree node.'): 0.0, Param(parent=u'DecisionTreeRegressor_478380e9b420916b3f00', name='seed', doc='random seed'): -2808853809871465425, Param(parent=u'DecisionTreeRegressor_478380e9b420916b3f00', name='maxDepth', doc='Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes.'): 5, Param(parent=u'DecisionTreeRegressor_478380e9b420916b3f00', name='maxBins', doc='Max number of bins for discretizing continuous features.  Must be >=2 and >= number of categories for any categorical feature.'): 650, Param(parent=u'DecisionTreeRegressor_478380e9b420916b3f00', name='maxMemoryInMB', doc='Maximum memory in MB allocated to histogram aggregation.'): 256}\n"}]}},{"text":"%pyspark\npredict = modelo_mloop.transform(test_data)","dateUpdated":"2018-05-03T01:02:04+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215438_-1314919549","id":"20180425-212841_282151097","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:287","user":"anonymous","dateFinished":"2018-05-03T02:16:38+0000","dateStarted":"2018-05-03T02:16:38+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\npredict.select('features', 'prediction').show()","dateUpdated":"2018-05-03T01:02:04+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215438_-1314919549","id":"20180425-214452_190773945","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:288","user":"anonymous","dateFinished":"2018-05-03T02:16:40+0000","dateStarted":"2018-05-03T02:16:38+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+-------------------+\n|            features|         prediction|\n+--------------------+-------------------+\n|[1.0,1.0,4.0,2.0,...|-2.4528845306579727|\n|[1.0,1.0,4.0,2.0,...|-2.4528845306579727|\n|[1.0,1.0,4.0,2.0,...|  8.101572460688482|\n|[1.0,1.0,4.0,2.0,...|-2.4528845306579727|\n|[1.0,1.0,4.0,2.0,...|-2.4528845306579727|\n|[1.0,1.0,4.0,2.0,...| 1.5972040184158935|\n|[1.0,1.0,4.0,2.0,...| 1.5972040184158935|\n|[1.0,1.0,4.0,2.0,...|-2.4528845306579727|\n|[1.0,1.0,4.0,2.0,...|-2.4528845306579727|\n|[1.0,1.0,4.0,2.0,...| 18.383467028207736|\n|[1.0,1.0,4.0,2.0,...| 34.449890692139526|\n|[1.0,1.0,4.0,2.0,...| 1.5972040184158935|\n|[1.0,1.0,4.0,2.0,...|-2.4528845306579727|\n|[1.0,1.0,4.0,2.0,...|  8.828960360297073|\n|[1.0,1.0,4.0,2.0,...|  8.828960360297073|\n|[1.0,1.0,4.0,2.0,...| 1.5972040184158935|\n|[1.0,1.0,4.0,2.0,...|  8.828960360297073|\n|[1.0,1.0,4.0,2.0,...|  8.828960360297073|\n|[1.0,1.0,4.0,2.0,...|-2.4528845306579727|\n|[1.0,1.0,4.0,2.0,...|-2.4528845306579727|\n+--------------------+-------------------+\nonly showing top 20 rows\n\n"}]}},{"text":"%pyspark\n# Select (prediction, true label) and compute test error\nevaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"rmse\")\n\nrmse = evaluator.evaluate(predict)\nprint(\"Root Mean Squared Error (RMSE) on test data = %g\" % rmse)","dateUpdated":"2018-05-03T01:02:04+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309215438_-1314919549","id":"20180425-214710_1349241451","dateCreated":"2018-05-03T01:00:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:289","user":"anonymous","dateFinished":"2018-05-03T02:16:51+0000","dateStarted":"2018-05-03T02:16:39+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Root Mean Squared Error (RMSE) on test data = 9.24424\n"}]}},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2018-05-03T01:02:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525309324910_-1082410265","id":"20180503-010204_952194381","dateCreated":"2018-05-03T01:02:04+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1470"}],"name":"tarea_7","id":"2DEM2537H","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}