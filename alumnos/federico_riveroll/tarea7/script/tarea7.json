{"paragraphs":[{"text":"%spark.pyspark\n# Importamos todo lo que necesitamos\nfrom pyspark.sql import SQLContext\nfrom pyspark.sql.types import *\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.ml.regression import RandomForestRegressor\nfrom pyspark.ml.regression import LinearRegression\nfrom pyspark.ml.tuning import ParamGridBuilder, TrainValidationSplit\nfrom pyspark.sql.functions import col \nfrom pyspark.ml.feature import VectorAssembler, VectorIndexer\nfrom pyspark.ml.regression import GBTRegressor\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\nfrom pyspark.ml.evaluation import RegressionEvaluator","user":"anonymous","dateUpdated":"2018-04-19T03:50:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1524074734659_1741533240","id":"20180418-180534_537873538","dateCreated":"2018-04-18T18:05:34+0000","dateStarted":"2018-04-19T03:50:26+0000","dateFinished":"2018-04-19T03:50:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:273"},{"text":"%spark.pyspark\n# Importamos la tabla \"flights\" que cargué en s3 y se imprimen los nombres de sus columnas para ver que todo bien.\nsqlContext = SQLContext(sc)\nflights = sqlContext.read.load('s3a://tarea7/flights.csv', format='com.databricks.spark.csv', header='true', inferSchema='true')\nflights.cache()\n","user":"anonymous","dateUpdated":"2018-04-19T03:31:33+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DataFrame[YEAR: int, MONTH: int, DAY: int, DAY_OF_WEEK: int, AIRLINE: string, FLIGHT_NUMBER: int, TAIL_NUMBER: string, ORIGIN_AIRPORT: string, DESTINATION_AIRPORT: string, SCHEDULED_DEPARTURE: int, DEPARTURE_TIME: int, DEPARTURE_DELAY: int, TAXI_OUT: int, WHEELS_OFF: int, SCHEDULED_TIME: int, ELAPSED_TIME: int, AIR_TIME: int, DISTANCE: int, WHEELS_ON: int, TAXI_IN: int, SCHEDULED_ARRIVAL: int, ARRIVAL_TIME: int, ARRIVAL_DELAY: int, DIVERTED: int, CANCELLED: int, CANCELLATION_REASON: string, AIR_SYSTEM_DELAY: int, SECURITY_DELAY: int, AIRLINE_DELAY: int, LATE_AIRCRAFT_DELAY: int, WEATHER_DELAY: int]\n"}]},"apps":[],"jobName":"paragraph_1524074776298_1889538973","id":"20180418-180616_25963306","dateCreated":"2018-04-18T18:06:16+0000","dateStarted":"2018-04-19T03:31:33+0000","dateFinished":"2018-04-19T03:31:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:274"},{"text":"%spark.pyspark\ndf = flights.select('YEAR', 'MONTH', 'DAY', 'SCHEDULED_DEPARTURE', 'DEPARTURE_TIME', 'DEPARTURE_DELAY')\ndf.cache()\ndf.printSchema()","user":"anonymous","dateUpdated":"2018-04-19T03:32:59+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- YEAR: integer (nullable = true)\n |-- MONTH: integer (nullable = true)\n |-- DAY: integer (nullable = true)\n |-- SCHEDULED_DEPARTURE: integer (nullable = true)\n |-- DEPARTURE_TIME: integer (nullable = true)\n |-- DEPARTURE_DELAY: integer (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1524075523717_-103991742","id":"20180418-181843_398522980","dateCreated":"2018-04-18T18:18:43+0000","dateStarted":"2018-04-19T03:32:59+0000","dateFinished":"2018-04-19T03:32:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:275"},{"text":"%spark.pyspark\ndf = df.where(col(\"DEPARTURE_TIME\").isNotNull() & col(\"DEPARTURE_DELAY\").isNotNull())\ndf.describe().show()","user":"anonymous","dateUpdated":"2018-04-19T03:33:03+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+-------+------------------+------------------+-------------------+------------------+-----------------+\n|summary|   YEAR|             MONTH|               DAY|SCHEDULED_DEPARTURE|    DEPARTURE_TIME|  DEPARTURE_DELAY|\n+-------+-------+------------------+------------------+-------------------+------------------+-----------------+\n|  count|5732926|           5732926|           5732926|            5732926|           5732926|          5732926|\n|   mean| 2015.0| 6.547210796022834|15.708531385194926| 1328.9635418283788|1335.2044390595659|9.370158275198389|\n| stddev|    0.0|3.3971112368161216|  8.77477661803467| 483.47278791643186|  496.423260119418| 37.0809424967871|\n|    min|   2015|                 1|                 1|                  1|                 1|              -82|\n|    max|   2015|                12|                31|               2359|              2400|             1988|\n+-------+-------+------------------+------------------+-------------------+------------------+-----------------+\n\n"}]},"apps":[],"jobName":"paragraph_1524075676462_890982593","id":"20180418-182116_828908291","dateCreated":"2018-04-18T18:21:16+0000","dateStarted":"2018-04-19T03:33:03+0000","dateFinished":"2018-04-19T03:33:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:276"},{"text":"%spark.pyspark\ndf = df.select([col(c).cast(\"double\").alias(c) for c in df.columns])\ndf.printSchema()","user":"anonymous","dateUpdated":"2018-04-19T03:33:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- YEAR: double (nullable = true)\n |-- MONTH: double (nullable = true)\n |-- DAY: double (nullable = true)\n |-- SCHEDULED_DEPARTURE: double (nullable = true)\n |-- DEPARTURE_TIME: double (nullable = true)\n |-- DEPARTURE_DELAY: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1524075711312_1954089777","id":"20180418-182151_1764636475","dateCreated":"2018-04-18T18:21:51+0000","dateStarted":"2018-04-19T03:33:09+0000","dateFinished":"2018-04-19T03:33:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:277"},{"text":"%spark.pyspark\ntrain, test = df.randomSplit([0.7, 0.3])\nprint (\"Hay %d observaciones de entrenamiento y %d de prueba.\" % (train.count(), test.count()))","user":"anonymous","dateUpdated":"2018-04-19T03:33:16+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Hay 4014924 observaciones de entrenamiento y 1718002 de prueba.\n"}]},"apps":[],"jobName":"paragraph_1524075742036_332235245","id":"20180418-182222_1566266746","dateCreated":"2018-04-18T18:22:22+0000","dateStarted":"2018-04-19T03:33:16+0000","dateFinished":"2018-04-19T03:33:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:278"},{"text":"%spark.pyspark\n# Hacemos el vector assembler  que ponen todas las variables independientes (todas menos la objetivo) en una columna, y el indexer que intenta adivinar cuales son categóricas.\nfeaturesCols = df.columns\n# Quitamos la objetivo\nfeaturesCols.remove('DEPARTURE_DELAY')\nvectorAssembler = VectorAssembler(inputCols=featuresCols, outputCol=\"rawFeatures\")\nvectorIndexer = VectorIndexer(inputCol=\"rawFeatures\", outputCol=\"features\", maxCategories=4)","user":"anonymous","dateUpdated":"2018-04-18T19:03:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1524075767257_-683086454","id":"20180418-182247_132329053","dateCreated":"2018-04-18T18:22:47+0000","dateStarted":"2018-04-18T18:26:48+0000","dateFinished":"2018-04-18T18:26:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:279"},{"text":"%spark.pyspark\n# Ahora ajustamos GBTRegressor para que aprenda a predecir \"DEPARTURE_DELAY\"\ngbt = GBTRegressor(labelCol=\"DEPARTURE_DELAY\")","user":"anonymous","dateUpdated":"2018-04-18T19:03:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1524075775538_131827041","id":"20180418-182255_240070245","dateCreated":"2018-04-18T18:22:55+0000","dateStarted":"2018-04-18T18:26:55+0000","dateFinished":"2018-04-18T18:26:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:280"},{"text":"%spark.pyspark\n\n# Definimos el Grid de parámetros con tres valores diferentes para la profundidad maxima de cada arbol (maxDepth) y para el número de arboles en cada iteración (maxIter)\nparamGrid = ParamGridBuilder()\\\n  .addGrid(gbt.maxDepth, [5, 10, 20])\\\n  .addGrid(gbt.maxIter, [5, 10, 20])\\\n  .build()\n# Definimos la métrica de evaluación, en este caso es 'rmse'. el objeto gbt ya sabe cual es su 'label col' y su 'prediction col'\nevaluator = RegressionEvaluator(metricName=\"rmse\", labelCol=gbt.getLabelCol(), predictionCol=gbt.getPredictionCol())\n# Declaramos el 'CrossValidator' que hará el tuneo del modelo, le especificamos el estimador (bgt), el evaluador y el grid de parámetros (todo lo definido anteriormente).\ncv = CrossValidator(estimator=gbt, evaluator=evaluator, estimatorParamMaps=paramGrid)","user":"anonymous","dateUpdated":"2018-04-18T19:07:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1524075791558_1534468289","id":"20180418-182311_983803029","dateCreated":"2018-04-18T18:23:11+0000","dateStarted":"2018-04-18T18:42:55+0000","dateFinished":"2018-04-18T18:42:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:281"},{"text":"%spark.pyspark\nfrom pyspark.ml import Pipeline\npipeline = Pipeline(stages=[vectorAssembler, vectorIndexer, cv])\npipelineModel = pipeline.fit(train)","user":"anonymous","dateUpdated":"2018-04-18T18:43:00+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1524075802666_314044778","id":"20180418-182322_825571814","dateCreated":"2018-04-18T18:23:22+0000","dateStarted":"2018-04-18T18:43:00+0000","dateFinished":"2018-04-19T00:45:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:282"},{"text":"%spark.pyspark\npredictions = pipelineModel.transform(test)","user":"anonymous","dateUpdated":"2018-04-19T03:33:27+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1524076030498_-693039911","id":"20180418-182710_2054377983","dateCreated":"2018-04-18T18:27:10+0000","dateStarted":"2018-04-19T03:33:27+0000","dateFinished":"2018-04-19T03:33:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:283"},{"text":"%spark.pyspark\npredictions.select(\"DEPARTURE_DELAY\", \"prediction\", *featuresCols).show()","user":"anonymous","dateUpdated":"2018-04-19T03:33:39+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------+-------------------+------+-----+---+-------------------+--------------+\n|DEPARTURE_DELAY|         prediction|  YEAR|MONTH|DAY|SCHEDULED_DEPARTURE|DEPARTURE_TIME|\n+---------------+-------------------+------+-----+---+-------------------+--------------+\n|           -2.0|-1.4167341040078905|2015.0|  1.0|1.0|               20.0|          18.0|\n|           -1.0|-1.4167341040078905|2015.0|  1.0|1.0|               25.0|          24.0|\n|           14.0|-1.4167341040078905|2015.0|  1.0|1.0|               30.0|          44.0|\n|           -8.0|-1.4167341040078905|2015.0|  1.0|1.0|               35.0|          27.0|\n|           -6.0|-1.4167341040078905|2015.0|  1.0|1.0|               40.0|          34.0|\n|           -4.0|-1.4167341040078905|2015.0|  1.0|1.0|               45.0|          41.0|\n|           25.0|-1.4167341040078905|2015.0|  1.0|1.0|               55.0|         120.0|\n|           -2.0|-1.4167341040078905|2015.0|  1.0|1.0|              105.0|         103.0|\n|           -8.0|-1.4167341040078905|2015.0|  1.0|1.0|              115.0|         107.0|\n|           72.0|-1.4167341040078905|2015.0|  1.0|1.0|              125.0|         237.0|\n|           -1.0|-1.4167341040078905|2015.0|  1.0|1.0|              159.0|         158.0|\n|           -7.0|-1.4167341040078905|2015.0|  1.0|1.0|              255.0|         248.0|\n|          -14.0|-1.4167341040078905|2015.0|  1.0|1.0|              330.0|         316.0|\n|          -11.0|-1.4167341040078905|2015.0|  1.0|1.0|              424.0|         413.0|\n|           72.0|-1.4167341040078905|2015.0|  1.0|1.0|              438.0|         550.0|\n|           -4.0|-1.4167341040078905|2015.0|  1.0|1.0|              500.0|         456.0|\n|           -8.0|-1.4167341040078905|2015.0|  1.0|1.0|              505.0|         457.0|\n|           -3.0|-1.4167341040078905|2015.0|  1.0|1.0|              510.0|         507.0|\n|            4.0|-1.4167341040078905|2015.0|  1.0|1.0|              510.0|         514.0|\n|           -5.0|-1.4167341040078905|2015.0|  1.0|1.0|              515.0|         510.0|\n+---------------+-------------------+------+-----+---+-------------------+--------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1524076851657_1954597872","id":"20180418-184051_2019855975","dateCreated":"2018-04-18T18:40:51+0000","dateStarted":"2018-04-19T03:33:39+0000","dateFinished":"2018-04-19T03:33:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284"},{"text":"%spark.pyspark\n\nrmse = evaluator.evaluate(predictions)\nprint \"RMSE on our test set: %g\" % rmse","user":"anonymous","dateUpdated":"2018-04-19T04:30:36+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"RMSE on our test set: 22.5002\n"}]},"apps":[],"jobName":"paragraph_1524076865476_2075824424","id":"20180418-184105_2120528862","dateCreated":"2018-04-18T18:41:05+0000","dateStarted":"2018-04-19T04:30:09+0000","dateFinished":"2018-04-19T04:30:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:285"},{"text":"%spark.pyspark\n# Ahora ajustamos RandomForestRegressor para que aprenda a predecir \"DEPARTURE_DELAY\"\nrfr = RandomForestRegressor(labelCol=\"DEPARTURE_DELAY\")\n\n# Definimos el Grid de parámetros con tres valores diferentes para la profundidad maxima de cada arbol (maxDepth) y para el número de arboles en cada iteración (maxIter)\nparamGrid = ParamGridBuilder()\\\n  .addGrid(rfr.maxDepth, [3,5,7])\\\n  .addGrid(rfr.numTrees, [5, 10, 30])\\\n  .build()\n# Definimos la métrica de evaluación, en este caso es 'rmse'. el objeto rfr ya sabe cual es su 'label col' y su 'prediction col'\nevaluator = RegressionEvaluator(metricName=\"rmse\", labelCol=rfr.getLabelCol(), predictionCol=rfr.getPredictionCol())\n# Declaramos el 'CrossValidator' que hará el tuneo del modelo, le especificamos el estimador (bgt), el evaluador y el grid de parámetros (todo lo definido anteriormente).\ncv = CrossValidator(estimator=rfr, evaluator=evaluator, estimatorParamMaps=paramGrid)\n\n\npipeline = Pipeline(stages=[vectorAssembler, vectorIndexer, cv])\npipelineModel = pipeline.fit(train)\n","user":"anonymous","dateUpdated":"2018-04-19T03:53:43+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1524087743568_1399536475","id":"20180418-214223_886529387","dateCreated":"2018-04-18T21:42:23+0000","dateStarted":"2018-04-19T03:53:43+0000","dateFinished":"2018-04-19T04:02:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:286"},{"text":"%spark.pyspark\npredictions = pipelineModel.transform(test)\nrmse = evaluator.evaluate(predictions)\nprint \"RMSE on our test set: %g\" % rmse\n","user":"anonymous","dateUpdated":"2018-04-19T04:30:37+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"RMSE on our test set: 22.5002\n"}]},"apps":[],"jobName":"paragraph_1524087758426_412270797","id":"20180418-214238_2039612975","dateCreated":"2018-04-18T21:42:38+0000","dateStarted":"2018-04-19T04:30:37+0000","dateFinished":"2018-04-19T04:30:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:287"},{"text":"%spark.pyspark\nprediction = pipelineModel.transform(test)\nprediction","user":"anonymous","dateUpdated":"2018-04-19T04:28:45+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524087786695_-1754772926","id":"20180418-214306_316580461","dateCreated":"2018-04-18T21:43:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:288","dateFinished":"2018-04-19T04:28:45+0000","dateStarted":"2018-04-19T04:28:45+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DataFrame[YEAR: double, MONTH: double, DAY: double, SCHEDULED_DEPARTURE: double, DEPARTURE_TIME: double, DEPARTURE_DELAY: double, rawFeatures: vector, features: vector, prediction: double]\n"}]}},{"text":"%spark.pyspark\nbestPipeline = cvModel.bestModel\nbestLRModel = bestPipeline.stages[2]\nbestParams = bestLRModel.extractParamMap()","user":"anonymous","dateUpdated":"2018-04-19T04:18:35+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524110721149_953014636","id":"20180419-040521_911715251","dateCreated":"2018-04-19T04:05:21+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1572"}],"name":"tarea7","id":"2DBUF77ZX","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}