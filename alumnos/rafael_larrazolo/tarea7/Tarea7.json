{"paragraphs":[{"text":"%pyspark\n\n# Importamos librerías\nfrom pyspark.context import SparkContext\nfrom pyspark.sql.session import SparkSession\nfrom pyspark.ml.regression import RandomForestRegressor\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml.feature import StringIndexer\nfrom pyspark.ml.feature import OneHotEncoder\nfrom pyspark.ml import Pipeline\nfrom pyspark.context import SparkContext\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.ml.regression import DecisionTreeRegressor\n","user":"anonymous","dateUpdated":"2018-04-23T17:50:36+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524505815418_-972901440","id":"20180423-175015_500713883","dateCreated":"2018-04-23T17:50:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:893","dateFinished":"2018-04-23T17:50:36+0000","dateStarted":"2018-04-23T17:50:36+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n\nflights = spark.read.csv(\"s3a://larrazolo/data/flights.csv\", header = True, inferSchema = True, nullValue = 'null')","user":"anonymous","dateUpdated":"2018-04-23T17:39:32+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1524504562607_-1015200272","id":"20180423-172922_2090880743","dateCreated":"2018-04-23T17:29:22+0000","dateStarted":"2018-04-23T17:39:32+0000","dateFinished":"2018-04-23T17:40:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:253"},{"text":"%pyspark\n#Vemos la estructura de los datos\nflights.limit(1).show()","user":"anonymous","dateUpdated":"2018-04-23T22:06:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524504806341_1838262324","id":"20180423-173326_1945560805","dateCreated":"2018-04-23T17:33:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:254","dateFinished":"2018-04-23T17:42:46+0000","dateStarted":"2018-04-23T17:42:24+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+-----+---+-----------+-------+-------------+-----------+--------------+-------------------+-------------------+--------------+---------------+--------+----------+--------------+------------+--------+--------+---------+-------+-----------------+------------+-------------+--------+---------+-------------------+----------------+--------------+-------------+-------------------+-------------+\n|YEAR|MONTH|DAY|DAY_OF_WEEK|AIRLINE|FLIGHT_NUMBER|TAIL_NUMBER|ORIGIN_AIRPORT|DESTINATION_AIRPORT|SCHEDULED_DEPARTURE|DEPARTURE_TIME|DEPARTURE_DELAY|TAXI_OUT|WHEELS_OFF|SCHEDULED_TIME|ELAPSED_TIME|AIR_TIME|DISTANCE|WHEELS_ON|TAXI_IN|SCHEDULED_ARRIVAL|ARRIVAL_TIME|ARRIVAL_DELAY|DIVERTED|CANCELLED|CANCELLATION_REASON|AIR_SYSTEM_DELAY|SECURITY_DELAY|AIRLINE_DELAY|LATE_AIRCRAFT_DELAY|WEATHER_DELAY|\n+----+-----+---+-----------+-------+-------------+-----------+--------------+-------------------+-------------------+--------------+---------------+--------+----------+--------------+------------+--------+--------+---------+-------+-----------------+------------+-------------+--------+---------+-------------------+----------------+--------------+-------------+-------------------+-------------+\n|2015|    4|  5|          7|     EV|         3951|     N11539|           SHV|                IAH|               1706|          1723|             17|       9|      1732|            65|          72|      48|     192|     1820|     15|             1811|        1835|           24|       0|        0|               null|               7|             0|            1|                 16|            0|\n+----+-----+---+-----------+-------+-------------+-----------+--------------+-------------------+-------------------+--------------+---------------+--------+----------+--------------+------------+--------+--------+---------+-------+-----------------+------------+-------------+--------+---------+-------------------+----------------+--------------+-------------+-------------------+-------------+\n\n"}]}},{"text":"%pyspark\n\n#Quitamos las variables que tienen NA\ndata = flights.select(['YEAR', 'MONTH', 'DAY', 'DAY_OF_WEEK', 'AIRLINE', 'FLIGHT_NUMBER', 'TAIL_NUMBER', 'ORIGIN_AIRPORT', 'DESTINATION_AIRPORT', 'SCHEDULED_DEPARTURE', 'DEPARTURE_TIME', 'DEPARTURE_DELAY', 'TAXI_OUT', 'WHEELS_OFF', 'SCHEDULED_TIME', 'ELAPSED_TIME', 'AIR_TIME', 'DISTANCE', 'WHEELS_ON', 'TAXI_IN', 'SCHEDULED_ARRIVAL', 'ARRIVAL_TIME', 'ARRIVAL_DELAY', 'DIVERTED', 'CANCELLED'])\ndata = data.na.drop(subset=['YEAR', 'MONTH', 'DAY', 'DAY_OF_WEEK', 'AIRLINE', 'FLIGHT_NUMBER', 'TAIL_NUMBER', 'ORIGIN_AIRPORT', 'DESTINATION_AIRPORT', 'SCHEDULED_DEPARTURE', 'DEPARTURE_TIME', 'DEPARTURE_DELAY', 'TAXI_OUT', 'WHEELS_OFF', 'SCHEDULED_TIME', 'ELAPSED_TIME', 'AIR_TIME', 'DISTANCE', 'WHEELS_ON', 'TAXI_IN', 'SCHEDULED_ARRIVAL', 'ARRIVAL_TIME', 'ARRIVAL_DELAY', 'DIVERTED', 'CANCELLED'])\ndata = data.withColumnRenamed('DEPARTURE_DELAY', 'label')\n\n\n","user":"anonymous","dateUpdated":"2018-04-23T17:47:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524505344662_1127966593","id":"20180423-174224_1603897902","dateCreated":"2018-04-23T17:42:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:401","dateFinished":"2018-04-23T17:47:07+0000","dateStarted":"2018-04-23T17:47:07+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n\n# Separamos por set de entrenamiento y prueba\n(training_data, test_data) = data.randomSplit([0.7, 0.3])\ntraining_data.count()\n\n","user":"anonymous","dateUpdated":"2018-04-23T17:47:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524505483362_1267461878","id":"20180423-174443_1617895216","dateCreated":"2018-04-23T17:44:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:482","dateFinished":"2018-04-23T17:47:22+0000","dateStarted":"2018-04-23T17:47:09+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"3998132\n"}]}},{"text":"%pyspark\n\n#Trabajamos con las variables categóricas\nairline_indexer = StringIndexer(inputCol='AIRLINE', outputCol='AIRLINE_numeric', handleInvalid='skip')\n\ntailNumber_indexer = StringIndexer(inputCol='TAIL_NUMBER', outputCol='TAIL_NUMBER_numeric', handleInvalid='skip')\n\noriginAirport_indexer = StringIndexer(inputCol='ORIGIN_AIRPORT', outputCol='ORIGIN_AIRPORT_numeric', handleInvalid='skip')\n\ndestinationAirport_indexer = StringIndexer(inputCol='DESTINATION_AIRPORT', outputCol='DESTINATION_AIRPORT_numeric', handleInvalid='skip')\n","user":"anonymous","dateUpdated":"2018-04-23T17:50:39+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524505517069_216525452","id":"20180423-174517_900073233","dateCreated":"2018-04-23T17:45:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:581","dateFinished":"2018-04-23T17:50:39+0000","dateStarted":"2018-04-23T17:50:39+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n\nassembler = VectorAssembler(inputCols=['YEAR', 'MONTH', 'DAY', 'DAY_OF_WEEK', 'AIRLINE_numeric', 'FLIGHT_NUMBER', 'ORIGIN_AIRPORT_numeric', 'DESTINATION_AIRPORT_numeric', 'SCHEDULED_DEPARTURE', 'DEPARTURE_TIME', 'TAXI_OUT', 'WHEELS_OFF', 'SCHEDULED_TIME', 'ELAPSED_TIME', 'AIR_TIME', 'DISTANCE', 'WHEELS_ON', 'TAXI_IN', 'SCHEDULED_ARRIVAL', 'ARRIVAL_TIME', 'ARRIVAL_DELAY', 'DIVERTED', 'CANCELLED'], outputCol='features')\n","user":"anonymous","dateUpdated":"2018-04-23T17:50:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524505775397_1526381442","id":"20180423-174935_479409229","dateCreated":"2018-04-23T17:49:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:719","dateFinished":"2018-04-23T17:50:56+0000","dateStarted":"2018-04-23T17:50:56+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n\n# Se crea el modelo de Árbol de Decisión\ndt = DecisionTreeRegressor(labelCol=\"label\", featuresCol=\"features\", maxBins=800)\n\n# Se crea el pipeline del modelo\npipeline_dt = Pipeline(stages=[airline_indexer, tailNumber_indexer, originAirport_indexer, destinationAirport_indexer, assembler, dt])\n\n# Grid con los distintos parámetros a probar\nparamGrid_dt = ParamGridBuilder() \\\n    .addGrid(dt.maxDepth, [2, 5, 10]) \\\n    .addGrid(dt.minInstancesPerNode, [100, 500, 1000]) \\\n    .build()","user":"anonymous","dateUpdated":"2018-04-23T17:53:57+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524505945981_830632838","id":"20180423-175225_1351683786","dateCreated":"2018-04-23T17:52:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1039","dateFinished":"2018-04-23T17:53:57+0000","dateStarted":"2018-04-23T17:53:57+0000","title":"DECISION TREE","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n\n# Se crea el modelo Random Forest\nrf = RandomForestRegressor(labelCol='label', featuresCol='features', maxBins=800)\n\n# Se crea el pipeline con el Random Forest\npipeline_rf = Pipeline(stages=[airline_indexer, tailNumber_indexer, originAirport_indexer, destinationAirport_indexer, assembler, rf])\n\n# Grid con los parámetros a probar\nparamGrid_rf = ParamGridBuilder() \\\n    .addGrid(rf.maxDepth, [2, 3, 4]) \\\n    .addGrid(rf.numTrees, [10, 12, 15]) \\\n    .build()\n\n","user":"anonymous","dateUpdated":"2018-04-23T17:54:02+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524505856204_-707547292","id":"20180423-175056_993915283","dateCreated":"2018-04-23T17:50:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:965","dateFinished":"2018-04-23T17:54:02+0000","dateStarted":"2018-04-23T17:54:02+0000","title":"RANDOM FOREST","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n\nmy_models = [rf, dt]\nmy_grids = [paramGrid_rf, paramGrid_dt]\n\n","user":"anonymous","dateUpdated":"2018-04-23T18:04:35+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524506042788_249767623","id":"20180423-175402_1352187014","dateCreated":"2018-04-23T17:54:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1101","dateFinished":"2018-04-23T18:04:35+0000","dateStarted":"2018-04-23T18:04:35+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n\ndef magic_loop(models_to_run, parameter_grids, data_train, data_test, cross_validation_folds):\n    best_models = list()\n    errors = list()\n    \n    for model in models_to_run:\n        \n        pipeline = Pipeline(stages=[airline_indexer, tailNumber_indexer, originAirport_indexer, destinationAirport_indexer, assembler, model])\n        \n        grid =  parameter_grids[models_to_run.index(model)]\n    \n        crossval = CrossValidator(estimator = pipeline,\n                              estimatorParamMaps = grid,\n                              evaluator = RegressionEvaluator(),\n                              numFolds= cross_validation_folds)\n    \n        cvModel = crossval.fit(data_train)\n        winner = cvModel.bestModel\n        best_models.append(winner)\n        predictions = cvModel.transform(data_test)\n        evaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"rmse\")\n        rmse = evaluator.evaluate(predictions)\n        errors.append(rmse)\n        \n    ganador_index = errors.index(min(errors))\n    \n    #print(\"Best Model: \" % best_models[ganador_index])\n    #print(\"Root Mean Squared Error (RMSE) on test data for best model = %g\" % errors[ganador_index])\n    return(best_models ,best_models[ganador_index] , errors[ganador_index])\n\n\n","user":"anonymous","dateUpdated":"2018-04-23T18:10:00+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524506675455_1927962416","id":"20180423-180435_1471953140","dateCreated":"2018-04-23T18:04:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1157","dateFinished":"2018-04-23T18:10:00+0000","dateStarted":"2018-04-23T18:10:00+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n\nsalida = magic_loop(models_to_run=my_models, parameter_grids=my_grids, data_train=training_data, data_test=test_data, cross_validation_folds=10)","user":"anonymous","dateUpdated":"2018-04-23T18:11:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524507012156_-555118853","id":"20180423-181012_1891456450","dateCreated":"2018-04-23T18:10:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1341","dateFinished":"2018-04-23T20:40:51+0000","dateStarted":"2018-04-23T18:11:55+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n\nprint(\"El mejor modelo fue {} con un RMSE de {} \".format(salida[1].stages[5], salida[2]))\n","user":"anonymous","dateUpdated":"2018-04-23T22:03:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524519421969_-647869495","id":"20180423-213701_828724372","dateCreated":"2018-04-23T21:37:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1711","dateFinished":"2018-04-23T22:03:31+0000","dateStarted":"2018-04-23T22:03:31+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"El mejor modelo fue DecisionTreeRegressionModel (uid=DecisionTreeRegressor_4b1fbbb0b216ef3ed57c) of depth 10 with 1405 nodes con un RMSE de 7.43725581901 \n"}]}},{"text":"%pyspark\n\nimport timeit, functools\nt = timeit.Timer(functools.partial(magic_loop(models_to_run=my_models, parameter_grids=my_grids, data_train=training_data, data_test=test_data, cross_validation_folds=10)) \n\nt.timeit()","user":"anonymous","dateUpdated":"2018-04-23T22:06:19+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524506721156_-545341432","id":"20180423-180521_1515563235","dateCreated":"2018-04-23T18:05:21+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1213"}],"name":"Tarea7","id":"2DD25XPJ9","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}